version: '3'

services:

  # The actualy prediction app
  flaskapp:
    build:
      context: ../
      dockerfile: Dockerfile
    container_name: flask-container
    ports:
      - 5000:5000
    environment:                            
      - AWS_ACCESS_KEY_ID=${aws_access_key_id}
      - AWS_SECRET_ACCESS_KEY=${aws_secret_access_key}
      - AWS_DEFAULT_REGION=${region}
      - EVIDENTLY_SERVICE=http://evidently_service.:8085' 
    networks:
      - mynetwork

  # All of the support application containers. We need:
  # 1. Mlflow - model tracking and registry
  # 2. Evidently - model performance once in production
  # 3. Grafana - Dashboarding of the model performance
  # 4. Database - a postgres database to store model monitoring metrics
  # 5. Database GUI - access the postgres database in the browser
  # 6. Prefect 2.0 server


  mlflow:
    build:
      context: ./mlflow_docker
      dockerfile: Dockerfile
    container_name: mlflow-container
    ports:
      - 8000:8000
    environment:                            
      - AWS_ACCESS_KEY_ID=${aws_access_key_id}
      - AWS_SECRET_ACCESS_KEY=${aws_secret_access_key}
      - AWS_DEFAULT_REGION=${region}
    networks:
      - mynetwork
   
  # evidently_service:
  #   build:
  #     context: ./evidently
  #     dockerfile: Dockerfile
  #   depends_on:
  #      - grafana
  #   ports:
  #     - "8085:8085"
  #   networks:
  #     - mynetwork
  
  database:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: password1
    ports:
      - "5432:5432"
    networks:
      - mynetwork
  
  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: example@example.com
      PGADMIN_DEFAULT_PASSWORD: password1
      PGADMIN_LISTEN_ADDRESS: 0.0.0.0
      PGADMIN_LISTEN_PORT: 5050
    ports:
      - "5050:5050"
    networks:
      - mynetwork

  prefect:
    image: prefecthq/prefect
    restart: always
    command: prefect orion start
    ports:
      - "8080:8080"
    networks:
      - mynetwork

  grafana:
    image: grafana/grafana
    user: "472"
    ports:
      - "3000:3000"
    networks:
      - mynetwork    
    restart: always

# The networks we will utilise for the containers
networks:
  mynetwork: